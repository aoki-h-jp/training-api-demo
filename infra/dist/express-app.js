"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const serverless_express_1 = __importDefault(require("@vendia/serverless-express"));
const express_1 = __importDefault(require("express"));
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const cors_1 = __importDefault(require("cors"));
const app = (0, express_1.default)();
const corsOptions = {
    origin: 'https://training-api-demo.vercel.app',
    methods: ['GET', 'POST', 'OPTIONS', 'PUT', 'DELETE'],
    allowedHeaders: ['*'],
};
app.use((0, cors_1.default)(corsOptions));
app.use(express_1.default.json());
const dynamoDb = new aws_sdk_1.default.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
app.get('/', (req, res) => {
    res.status(200).send('Hello from Express on Lambda using Function URLs!');
});
app.get('/health', (req, res) => {
    res.status(200).send('OK');
});
app.get('/get-reviews', async (req, res) => {
    const username = req.query.username;
    if (!username) {
        res.status(400).send('Username is required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        KeyConditionExpression: 'username = :username',
        ExpressionAttributeValues: {
            ':username': username,
        },
    };
    try {
        const data = await dynamoDb.query(params).promise();
        res.status(200).json(data.Items);
    }
    catch (error) {
        console.error('Error getting reviews:', error);
        res.status(500).send('Internal Server Error');
    }
});
app.post('/add-review', async (req, res) => {
    const review = req.body;
    if (!review.username || !review.title || !review.author || !review.review) {
        res.status(400).send('All fields are required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        Item: review,
    };
    try {
        await dynamoDb.put(params).promise();
        res.status(201).send('Review added successfully');
    }
    catch (error) {
        console.error('Error adding review:', error);
        res.status(500).send('Internal Server Error');
    }
});
app.put('/update-review', async (req, res) => {
    const review = req.body;
    if (!review.username || !review.title || !review.author || !review.review) {
        res.status(400).send('All fields are required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        Item: review,
    };
    try {
        await dynamoDb.put(params).promise();
        res.status(200).send('Review updated successfully');
    }
    catch (error) {
        console.error('Error updating review:', error);
        res.status(500).send('Internal Server Error');
    }
});
app.delete('/delete-review', async (req, res) => {
    const username = req.query.username;
    const title = req.query.title;
    if (!username || !title) {
        res.status(400).send('Username and title are required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        Key: { username, title },
    };
    try {
        await dynamoDb.delete(params).promise();
        res.status(200).send('Review deleted successfully');
    }
    catch (error) {
        console.error('Error deleting review:', error);
        res.status(500).send('Internal Server Error');
    }
});
exports.handler = (0, serverless_express_1.default)({ app });
//# sourceMappingURL=data:application/json;base64,