"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const serverless_express_1 = __importDefault(require("@vendia/serverless-express"));
const express_1 = __importDefault(require("express"));
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const cors_1 = __importDefault(require("cors"));
const app = (0, express_1.default)();
app.use((0, cors_1.default)({
    origin: 'https://training-api-demo.vercel.app',
    methods: ['GET', 'POST', 'OPTIONS', 'PUT', 'DELETE'],
    allowedHeaders: ['*'],
}));
const dynamoDb = new aws_sdk_1.default.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
app.get('/', (req, res) => {
    res.status(200).send('Hello from Express on Lambda using Function URLs!');
});
app.get('/health', (req, res) => {
    res.status(200).send('OK');
});
app.get('/get-reviews', async (req, res) => {
    const username = req.query.username;
    if (!username) {
        res.status(400).send('Username is required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        KeyConditionExpression: 'username = :username',
        ExpressionAttributeValues: {
            ':username': username,
        },
    };
    try {
        const data = await dynamoDb.query(params).promise();
        res.status(200).json(data.Items);
    }
    catch (error) {
        console.error('Error getting reviews:', error);
        res.status(500).send('Internal Server Error');
    }
});
app.post('/add-review', async (req, res) => {
    const review = req.body;
    if (!review || !review.username || !review.title || !review.author || !review.review) {
        res.status(400).send('All fields are required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        Item: review,
    };
    try {
        await dynamoDb.put(params).promise();
        res.status(201).send('Review added successfully');
    }
    catch (error) {
        console.error('Error adding review:', error);
        res.status(500).send('Internal Server Error');
    }
});
exports.handler = (0, serverless_express_1.default)({ app });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzcy1hcHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9sYW1iZGEvZXhwcmVzcy1hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0ZBQTJEO0FBQzNELHNEQUFxRDtBQUNyRCxzREFBMEI7QUFDMUIsZ0RBQXdCO0FBR3hCLE1BQU0sR0FBRyxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDO0FBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBQSxjQUFJLEVBQUM7SUFDWCxNQUFNLEVBQUUsc0NBQXNDO0lBQzlDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUM7SUFDcEQsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDO0NBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBRUosTUFBTSxRQUFRLEdBQUcsSUFBSSxpQkFBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNuRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFFaEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDM0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUM1RSxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ2pELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUM1RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUVwQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzdDLE9BQU87SUFDVCxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsVUFBVTtRQUNyQixzQkFBc0IsRUFBRSxzQkFBc0I7UUFDOUMseUJBQXlCLEVBQUU7WUFDekIsV0FBVyxFQUFFLFFBQVE7U0FDdEI7S0FDRixDQUFDO0lBRUYsSUFBSSxDQUFDO1FBQ0gsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQzVELE1BQU0sTUFBTSxHQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFFcEMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNyRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ2hELE9BQU87SUFDVCxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsVUFBVTtRQUNyQixJQUFJLEVBQUUsTUFBTTtLQUNiLENBQUM7SUFFRixJQUFJLENBQUM7UUFDSCxNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFVSxRQUFBLE9BQU8sR0FBRyxJQUFBLDRCQUFpQixFQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXJ2ZXJsZXNzRXhwcmVzcyBmcm9tICdAdmVuZGlhL3NlcnZlcmxlc3MtZXhwcmVzcyc7XG5pbXBvcnQgZXhwcmVzcywgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IEFXUyBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IHsgQm9va1JldmlldyB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5hcHAudXNlKGNvcnMoe1xuICBvcmlnaW46ICdodHRwczovL3RyYWluaW5nLWFwaS1kZW1vLnZlcmNlbC5hcHAnLFxuICBtZXRob2RzOiBbJ0dFVCcsICdQT1NUJywgJ09QVElPTlMnLCAnUFVUJywgJ0RFTEVURSddLFxuICBhbGxvd2VkSGVhZGVyczogWycqJ10sXG59KSk7XG5cbmNvbnN0IGR5bmFtb0RiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuY29uc3QgVEFCTEVfTkFNRSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgJyc7XG5cbmFwcC5nZXQoJy8nLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdIZWxsbyBmcm9tIEV4cHJlc3Mgb24gTGFtYmRhIHVzaW5nIEZ1bmN0aW9uIFVSTHMhJyk7XG59KTtcblxuYXBwLmdldCgnL2hlYWx0aCcsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgcmVzLnN0YXR1cygyMDApLnNlbmQoJ09LJyk7XG59KTtcblxuYXBwLmdldCgnL2dldC1yZXZpZXdzJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICBjb25zdCB1c2VybmFtZSA9IHJlcS5xdWVyeS51c2VybmFtZTtcblxuICBpZiAoIXVzZXJuYW1lKSB7XG4gICAgcmVzLnN0YXR1cyg0MDApLnNlbmQoJ1VzZXJuYW1lIGlzIHJlcXVpcmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiAndXNlcm5hbWUgPSA6dXNlcm5hbWUnLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICc6dXNlcm5hbWUnOiB1c2VybmFtZSxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGR5bmFtb0RiLnF1ZXJ5KHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGRhdGEuSXRlbXMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgcmV2aWV3czonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoJ0ludGVybmFsIFNlcnZlciBFcnJvcicpO1xuICB9XG59KTtcblxuYXBwLnBvc3QoJy9hZGQtcmV2aWV3JywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICBjb25zdCByZXZpZXc6IEJvb2tSZXZpZXcgPSByZXEuYm9keTtcblxuICBpZiAoIXJldmlldyB8fCAhcmV2aWV3LnVzZXJuYW1lIHx8ICFyZXZpZXcudGl0bGUgfHwgIXJldmlldy5hdXRob3IgfHwgIXJldmlldy5yZXZpZXcpIHtcbiAgICByZXMuc3RhdHVzKDQwMCkuc2VuZCgnQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgIEl0ZW06IHJldmlldyxcbiAgfTtcblxuICB0cnkge1xuICAgIGF3YWl0IGR5bmFtb0RiLnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICByZXMuc3RhdHVzKDIwMSkuc2VuZCgnUmV2aWV3IGFkZGVkIHN1Y2Nlc3NmdWxseScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyByZXZpZXc6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKCdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InKTtcbiAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gc2VydmVybGVzc0V4cHJlc3MoeyBhcHAgfSk7XG4iXX0=