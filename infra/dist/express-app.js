"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const serverless_express_1 = __importDefault(require("@vendia/serverless-express"));
const express_1 = __importDefault(require("express"));
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const app = (0, express_1.default)();
const dynamoDb = new aws_sdk_1.default.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
app.get('/', (req, res) => {
    res.status(200).send('Hello from Express on Lambda using Function URLs!');
});
app.get('/health', (req, res) => {
    res.status(200).send('OK');
});
app.get('/get-reviews', async (req, res) => {
    const username = req.query.username;
    if (!username) {
        res.status(400).send('Username is required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        KeyConditionExpression: 'username = :username',
        ExpressionAttributeValues: {
            ':username': username,
        },
    };
    try {
        const data = await dynamoDb.query(params).promise();
        res.status(200).json(data.Items);
    }
    catch (error) {
        console.error('Error getting reviews:', error);
        res.status(500).send('Internal Server Error');
    }
});
app.post('/add-review', async (req, res) => {
    const review = req.body;
    if (!review || !review.reviewId || !review.username || !review.title || !review.author || !review.review) {
        res.status(400).send('All fields are required');
        return;
    }
    const params = {
        TableName: TABLE_NAME,
        Item: review,
    };
    try {
        await dynamoDb.put(params).promise();
        res.status(201).send('Review added successfully');
    }
    catch (error) {
        console.error('Error adding review:', error);
        res.status(500).send('Internal Server Error');
    }
});
exports.handler = (0, serverless_express_1.default)({ app });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzcy1hcHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9sYW1iZGEvZXhwcmVzcy1hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0ZBQTJEO0FBQzNELHNEQUFxRDtBQUNyRCxzREFBMEI7QUFHMUIsTUFBTSxHQUFHLEdBQUcsSUFBQSxpQkFBTyxHQUFFLENBQUM7QUFFdEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxpQkFBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNuRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFFaEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDM0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUM1RSxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ2pELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUM1RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUVwQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzdDLE9BQU87SUFDVCxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsVUFBVTtRQUNyQixzQkFBc0IsRUFBRSxzQkFBc0I7UUFDOUMseUJBQXlCLEVBQUU7WUFDekIsV0FBVyxFQUFFLFFBQVE7U0FDdEI7S0FDRixDQUFDO0lBRUYsSUFBSSxDQUFDO1FBQ0gsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQzVELE1BQU0sTUFBTSxHQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFFcEMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDekcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNoRCxPQUFPO0lBQ1QsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHO1FBQ2IsU0FBUyxFQUFFLFVBQVU7UUFDckIsSUFBSSxFQUFFLE1BQU07S0FDYixDQUFDO0lBRUYsSUFBSSxDQUFDO1FBQ0gsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDaEQsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDO0FBRVUsUUFBQSxPQUFPLEdBQUcsSUFBQSw0QkFBaUIsRUFBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2VydmVybGVzc0V4cHJlc3MgZnJvbSAnQHZlbmRpYS9zZXJ2ZXJsZXNzLWV4cHJlc3MnO1xuaW1wb3J0IGV4cHJlc3MsIHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBCb29rUmV2aWV3IH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuY29uc3QgZHluYW1vRGIgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJztcblxuYXBwLmdldCgnLycsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgcmVzLnN0YXR1cygyMDApLnNlbmQoJ0hlbGxvIGZyb20gRXhwcmVzcyBvbiBMYW1iZGEgdXNpbmcgRnVuY3Rpb24gVVJMcyEnKTtcbn0pO1xuXG5hcHAuZ2V0KCcvaGVhbHRoJywgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICByZXMuc3RhdHVzKDIwMCkuc2VuZCgnT0snKTtcbn0pO1xuXG5hcHAuZ2V0KCcvZ2V0LXJldmlld3MnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHVzZXJuYW1lID0gcmVxLnF1ZXJ5LnVzZXJuYW1lO1xuXG4gIGlmICghdXNlcm5hbWUpIHtcbiAgICByZXMuc3RhdHVzKDQwMCkuc2VuZCgnVXNlcm5hbWUgaXMgcmVxdWlyZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246ICd1c2VybmFtZSA9IDp1c2VybmFtZScsXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge1xuICAgICAgJzp1c2VybmFtZSc6IHVzZXJuYW1lLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZHluYW1vRGIucXVlcnkocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oZGF0YS5JdGVtcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyByZXZpZXdzOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCgnSW50ZXJuYWwgU2VydmVyIEVycm9yJyk7XG4gIH1cbn0pO1xuXG5hcHAucG9zdCgnL2FkZC1yZXZpZXcnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHJldmlldzogQm9va1JldmlldyA9IHJlcS5ib2R5O1xuXG4gIGlmICghcmV2aWV3IHx8ICFyZXZpZXcucmV2aWV3SWQgfHwgIXJldmlldy51c2VybmFtZSB8fCAhcmV2aWV3LnRpdGxlIHx8ICFyZXZpZXcuYXV0aG9yIHx8ICFyZXZpZXcucmV2aWV3KSB7XG4gICAgcmVzLnN0YXR1cyg0MDApLnNlbmQoJ0FsbCBmaWVsZHMgYXJlIHJlcXVpcmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICBJdGVtOiByZXZpZXcsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBkeW5hbW9EYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgcmVzLnN0YXR1cygyMDEpLnNlbmQoJ1JldmlldyBhZGRlZCBzdWNjZXNzZnVsbHknKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhZGRpbmcgcmV2aWV3OicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCgnSW50ZXJuYWwgU2VydmVyIEVycm9yJyk7XG4gIH1cbn0pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IHNlcnZlcmxlc3NFeHByZXNzKHsgYXBwIH0pO1xuIl19